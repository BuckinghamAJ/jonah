// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package drcBible

import (
	"context"
	"database/sql"
)

const getBook = `-- name: GetBook :one
SELECT id, name FROM DRC_books
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (DrcBook, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i DrcBook
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBookFromTitle = `-- name: GetBookFromTitle :one
SELECT id, name FROM DRC_books
WHERE name = ? LIMIT 1
`

func (q *Queries) GetBookFromTitle(ctx context.Context, name sql.NullString) (DrcBook, error) {
	row := q.db.QueryRowContext(ctx, getBookFromTitle, name)
	var i DrcBook
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getChapter = `-- name: GetChapter :many
SELECT v.chapter, v.verse, v.text FROM DRC_verses as v
JOIN DRC_books as b ON b.id=v.book_id
WHERE v.book_id = ? and v.chapter = ?
ORDER BY v.verse
`

type GetChapterParams struct {
	BookID  sql.NullInt64
	Chapter sql.NullInt64
}

type GetChapterRow struct {
	Chapter sql.NullInt64
	Verse   sql.NullInt64
	Text    sql.NullString
}

func (q *Queries) GetChapter(ctx context.Context, arg GetChapterParams) ([]GetChapterRow, error) {
	rows, err := q.db.QueryContext(ctx, getChapter, arg.BookID, arg.Chapter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChapterRow
	for rows.Next() {
		var i GetChapterRow
		if err := rows.Scan(&i.Chapter, &i.Verse, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerses = `-- name: GetVerses :many
SELECT v.chapter, v.verse, v.text FROM DRC_verses as v
JOIN DRC_books as b ON b.id=v.book_id
WHERE v.book_id = ? and v.chapter = ? AND v.verse BETWEEN ? and ?
ORDER BY v.verse
`

type GetVersesParams struct {
	BookID     sql.NullInt64
	Chapter    sql.NullInt64
	StartVerse sql.NullInt64
	EndVerse   sql.NullInt64
}

type GetVersesRow struct {
	Chapter sql.NullInt64
	Verse   sql.NullInt64
	Text    sql.NullString
}

func (q *Queries) GetVerses(ctx context.Context, arg GetVersesParams) ([]GetVersesRow, error) {
	rows, err := q.db.QueryContext(ctx, getVerses, arg.BookID, arg.Chapter, arg.StartVerse, arg.EndVerse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVersesRow
	for rows.Next() {
		var i GetVersesRow
		if err := rows.Scan(&i.Chapter, &i.Verse, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
